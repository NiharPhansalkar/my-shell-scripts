#!/bin/bash

# After running the script, make sure to copy the ca_cert.crt file into your OS trust store and then run update-ca-certificates
# Since this requires root access, the script does not do it for you.

# Checking for installation of openssl

if ! [ -x "$(command -v openssl)" ]; then
    apt install libssl-dev
    apt install openssl
fi

# Storing our keys and certificate in a folder called certs

DIR_NAME=$(echo "$PWD" | rev | cut -d / -f 1 | rev)
if ! [ "$DIR_NAME" = "certs" ]; then
    if ! [ -d "certs" ]; then
        echo "Please run create_ssl_config script before this one"
        exit
    else 
        cd certs
        if ! [ -e "openssl-ca.cnf" ]; then
            echo "Please run create_ssl_config script before this one"
            exit
        elif ! [ -e "openssl-server.cnf" ]; then 
            echo "Please run create_ssl_config script before this one"
            exit
        fi
    fi
fi

# Generating our private keys

openssl genpkey -algorithm ed25519 -outform pem -out ca_pvt_key.pem
openssl genpkey -algorithm ed25519 -outform pem -out server_pvt_key.pem

# Generating our public key from the private key

# openssl pkey -in ca_pvt_key.pem -inform pem -outform pem -pubout -out ca_pub_key.pem
# openssl pkey -in server_pvt_key.pem -inform pem -outform pem -pubout -out server_pub_key.pem

# Generating our certificate

openssl req -inform pem -key ca_pvt_key.pem -days 36000 -x509 -config openssl-ca.cnf -nodes -outform pem -out ca_cert.pem
openssl x509 -outform der -in ca_cert.pem -out ca_cert.crt

# Creating SCR (Server Certificate Request)

openssl req -new -config openssl-server.cnf -key server_pvt_key.pem -nodes -outform pem -out server_certificate.csr 

# Signing of server cert by CA

cat << EOF >> openssl-ca.cnf
####################################################################
[ signing_policy ]
countryName            = optional
stateOrProvinceName    = optional
localityName           = optional
organizationName       = optional
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

####################################################################
[ signing_req ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:FALSE
keyUsage               = digitalSignature, keyEncipherment
EOF

cat << EOF >> temp.cnf
base_dir      = .
certificate   = \$base_dir/ca_cert.pem   # The CA certificate
private_key   = \$base_dir/ca_pvt_key.pem    # The CA private key
new_certs_dir = \$base_dir              # Location for new certs after signing
database      = \$base_dir/index.txt    # Database index file
serial        = \$base_dir/serial.txt   # The current serial number

unique_subject = no  # Set to 'no' to allow creation of
                     # several certificates with same subject.
EOF

sed -i "/copy_extensions/r temp.cnf" openssl-ca.cnf

rm temp.cnf

# Creating required index.txt and serial.txt files for openssl ca

touch index.txt
echo '01' > serial.txt

# Generating our final signed certificate
openssl ca -config openssl-ca.cnf -notext -policy signing_policy -extensions signing_req -out server_certificate.pem -infiles server_certificate.csr

cat server_certificate.pem > cert_chain.pem
cat ca_cert.pem >> cert_chain.pem
